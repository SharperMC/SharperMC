using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using SharpMC.Blocks;
using System.Drawing;

namespace SharpMC.Worlds.Better.biomes
{
	public class BiomeGenBase
	{
		public static BiomeGenBase[] biomeList = new BiomeGenBase[256];

		public static BiomeGenBase ocean = (new BiomeGenOcean(0)).setColor(112)
			.setBiomeName("Ocean")
			.setMinMaxHeight(-1.0F, 0.4F);

		public static BiomeGenBase plains =
			(new BiomeGenPlains(1)).setColor(9286496).setBiomeName("Plains").setTemperatureRainfall(0.8F, 0.4F);

		public static BiomeGenBase desert =
			(new BiomeGenDesert(2)).setColor(16421912)
				.setBiomeName("Desert")
				.setDisableRain()
				.setTemperatureRainfall(2.0F, 0.0F)
				.setMinMaxHeight(0.1F, 0.2F);

		public static BiomeGenBase extremeHills =
			(new BiomeGenHills(3)).setColor(6316128)
				.setBiomeName("Extreme Hills")
				.setMinMaxHeight(0.3F, 1.5F)
				.setTemperatureRainfall(0.2F, 0.3F);

		public static BiomeGenBase forest =
			(new BiomeGenForest(4)).setColor(353825)
				.setBiomeName("Forest")
				.func_76733_a(5159473)
				.setTemperatureRainfall(0.7F, 0.8F);

		public static BiomeGenBase taiga =
			(new BiomeGenTaiga(5)).setColor(747097)
				.setBiomeName("Taiga")
				.func_76733_a(5159473)
				.setEnableSnow()
				.setTemperatureRainfall(0.05F, 0.8F)
				.setMinMaxHeight(0.1F, 0.4F);

		public static BiomeGenBase swampland =
			(new BiomeGenSwamp(6)).setColor(522674)
				.setBiomeName("Swampland")
				.func_76733_a(9154376)
				.setMinMaxHeight(-0.2F, 0.1F)
				.setTemperatureRainfall(0.8F, 0.9F);

		public static BiomeGenBase river = (new BiomeGenRiver(7)).setColor(255)
			.setBiomeName("River")
			.setMinMaxHeight(-0.5F, 0.0F);

		public static BiomeGenBase hell =
			(new BiomeGenHell(8)).setColor(16711680).setBiomeName("Hell").setDisableRain().setTemperatureRainfall(2.0F, 0.0F);

		/** Is the biome used for sky world. */
		public static BiomeGenBase sky = (new BiomeGenEnd(9)).setColor(8421631).setBiomeName("Sky").setDisableRain();

		public static BiomeGenBase frozenOcean =
			(new BiomeGenOcean(10)).setColor(9474208)
				.setBiomeName("FrozenOcean")
				.setEnableSnow()
				.setMinMaxHeight(-1.0F, 0.5F)
				.setTemperatureRainfall(0.0F, 0.5F);

		public static BiomeGenBase frozenRiver =
			(new BiomeGenRiver(11)).setColor(10526975)
				.setBiomeName("FrozenRiver")
				.setEnableSnow()
				.setMinMaxHeight(-0.5F, 0.0F)
				.setTemperatureRainfall(0.0F, 0.5F);

		public static BiomeGenBase icePlains =
			(new BiomeGenSnow(12)).setColor(16777215)
				.setBiomeName("Ice Plains")
				.setEnableSnow()
				.setTemperatureRainfall(0.0F, 0.5F);

		public static BiomeGenBase iceMountains =
			(new BiomeGenSnow(13)).setColor(10526880)
				.setBiomeName("Ice Mountains")
				.setEnableSnow()
				.setMinMaxHeight(0.3F, 1.3F)
				.setTemperatureRainfall(0.0F, 0.5F);

		public static BiomeGenBase mushroomIsland =
			(new BiomeGenMushroomIsland(14)).setColor(16711935)
				.setBiomeName("MushroomIsland")
				.setTemperatureRainfall(0.9F, 1.0F)
				.setMinMaxHeight(0.2F, 1.0F);

		public static BiomeGenBase mushroomIslandShore =
			(new BiomeGenMushroomIsland(15)).setColor(10486015)
				.setBiomeName("MushroomIslandShore")
				.setTemperatureRainfall(0.9F, 1.0F)
				.setMinMaxHeight(-1.0F, 0.1F);

		/** Beach biome. */

		public static BiomeGenBase beach =
			(new BiomeGenBeach(16)).setColor(16440917)
				.setBiomeName("Beach")
				.setTemperatureRainfall(0.8F, 0.4F)
				.setMinMaxHeight(0.0F, 0.1F);

		/** Desert Hills biome. */

		public static BiomeGenBase desertHills =
			(new BiomeGenDesert(17)).setColor(13786898)
				.setBiomeName("DesertHills")
				.setDisableRain()
				.setTemperatureRainfall(2.0F, 0.0F)
				.setMinMaxHeight(0.3F, 0.8F);

		/** Forest Hills biome. */

		public static BiomeGenBase forestHills =
			(new BiomeGenForest(18)).setColor(2250012)
				.setBiomeName("ForestHills")
				.func_76733_a(5159473)
				.setTemperatureRainfall(0.7F, 0.8F)
				.setMinMaxHeight(0.3F, 0.7F);

		/** Taiga Hills biome. */

		public static BiomeGenBase taigaHills =
			(new BiomeGenTaiga(19)).setColor(1456435)
				.setBiomeName("TaigaHills")
				.setEnableSnow()
				.func_76733_a(5159473)
				.setTemperatureRainfall(0.05F, 0.8F)
				.setMinMaxHeight(0.3F, 0.8F);

		/** Extreme Hills Edge biome. */

		public static BiomeGenBase extremeHillsEdge =
			(new BiomeGenHills(20)).setColor(7501978)
				.setBiomeName("Extreme Hills Edge")
				.setMinMaxHeight(0.2F, 0.8F)
				.setTemperatureRainfall(0.2F, 0.3F);

		/** Jungle biome identifier */

		public static BiomeGenBase jungle =
			(new BiomeGenJungle(21)).setColor(5470985)
				.setBiomeName("Jungle")
				.func_76733_a(5470985)
				.setTemperatureRainfall(1.2F, 0.9F)
				.setMinMaxHeight(0.2F, 0.4F);

		public static BiomeGenBase jungleHills =
			(new BiomeGenJungle(22)).setColor(2900485)
				.setBiomeName("JungleHills")
				.func_76733_a(5470985)
				.setTemperatureRainfall(1.2F, 0.9F)
				.setMinMaxHeight(1.8F, 0.5F);

		public String biomeName;
		public int color;

		/** The block expected to be on the top of this biome */
		public byte topBlock;

		/** The block to fill spots in when not on the top */
		public byte fillerBlock;
		public int field_76754_C;

		/** The minimum height of this biome. Default 0.1. */
		public float minHeight;

		/** The maximum height of this biome. Default 0.3. */
		public float maxHeight;

		/** The temperature of this biome. */
		public float temperature;

		/** The rainfall in this biome. */
		public float rainfall;

		/** Color tint applied to water depending on biome */
		public int waterColorMultiplier;

		/** The biome decorator. */
		public BiomeDecorator theBiomeDecorator;

		/**
		 * Holds the classes of IMobs (hostile mobs) that can be spawned in the biome.
		 */
		//	protected List spawnableMonsterList; //Mobs are not implemented yet

		/**
		 * Holds the classes of any creature that can be spawned in the biome as friendly creature.
		 */
		//protected List spawnableCreatureList; //Mobs are not implemented yet

		/**
		 * Holds the classes of any aquatic creature that can be spawned in the water of the biome.
		 */
		//	protected List spawnableWaterCreatureList; //mobs not implemented yet
		//	protected List spawnableCaveCreatureList; //mobs not implemented yet

		/** Set to true if snow is enabled for this biome. */
		private bool enableSnow;

		/**
		 * Is true (default) if the biome support rain (desert and nether can't have rain)
		 */
		private bool enableRain;

		/** The id number to this biome, and its index in the biomeList array. */
		public int biomeID;

		/** The tree generator. */
		protected WorldGenTrees worldGeneratorTrees;

		/** The big tree generator. */
		protected WorldGenBigTree worldGeneratorBigTree;

		/** The forest generator. */
		protected WorldGenForest worldGeneratorForest;

		/** The swamp tree generator. */
		protected WorldGenSwamp worldGeneratorSwamp;

		protected BiomeGenBase(int par1)
		{
			this.topBlock = (byte) new BlockGrass().Id;
			this.fillerBlock = (byte) new BlockDirt().Id;
			this.field_76754_C = 5169201;
			this.minHeight = 0.1F;
			this.maxHeight = 0.3F;
			this.temperature = 0.5F;
			this.rainfall = 0.5F;
			this.waterColorMultiplier = 16777215;
			//this.spawnableMonsterList = new ArrayList();
			//this.spawnableCreatureList = new ArrayList();
			//this.spawnableWaterCreatureList = new ArrayList();
			//	this.spawnableCaveCreatureList = new ArrayList();
			this.enableRain = true;
		//	this.worldGeneratorTrees = new WorldGenTrees(false);
			//this.worldGeneratorBigTree = new WorldGenBigTree(false);
			//this.worldGeneratorForest = new WorldGenForest(false);
			//this.worldGeneratorSwamp = new WorldGenSwamp();
			this.biomeID = par1;
			biomeList[par1] = this;
			this.theBiomeDecorator = this.createBiomeDecorator();
			/*	this.spawnableCreatureList.add(new SpawnListEntry(EntitySheep.class, 12, 4, 4));
		this.spawnableCreatureList.add(new SpawnListEntry(EntityPig.class, 10, 4, 4));
		this.spawnableCreatureList.add(new SpawnListEntry(EntityChicken.class, 10, 4, 4));
		this.spawnableCreatureList.add(new SpawnListEntry(EntityCow.class, 8, 4, 4));
		this.spawnableMonsterList.add(new SpawnListEntry(EntitySpider.class, 10, 4, 4));
		this.spawnableMonsterList.add(new SpawnListEntry(EntityZombie.class, 10, 4, 4));
		this.spawnableMonsterList.add(new SpawnListEntry(EntitySkeleton.class, 10, 4, 4));
		this.spawnableMonsterList.add(new SpawnListEntry(EntityCreeper.class, 10, 4, 4));
		this.spawnableMonsterList.add(new SpawnListEntry(EntitySlime.class, 10, 4, 4));
		this.spawnableMonsterList.add(new SpawnListEntry(EntityEnderman.class, 1, 1, 4));
		this.spawnableWaterCreatureList.add(new SpawnListEntry(EntitySquid.class, 10, 4, 4));
		this.spawnableCaveCreatureList.add(new SpawnListEntry(EntityBat.class, 10, 8, 8));*/
		}

		/**
	 * Allocate a new BiomeDecorator for this BiomeGenBase
	 */

		protected BiomeDecorator createBiomeDecorator()
		{
			return new BiomeDecorator(this);
		}

		/**
	 * Sets the temperature and rainfall of this biome.
	 */

		private BiomeGenBase setTemperatureRainfall(float par1, float par2)
		{
			if (par1 > 0.1F && par1 < 0.2F)
			{
				throw new InvalidEnumArgumentException("Please avoid temperatures in the range 0.1 - 0.2 because of snow");
			}
			else
			{
				this.temperature = par1;
				this.rainfall = par2;
				return this;
			}
		}

		/**
	 * Sets the minimum and maximum height of this biome. Seems to go from -2.0 to 2.0.
	 */

		private BiomeGenBase setMinMaxHeight(float par1, float par2)
		{
			this.minHeight = par1;
			this.maxHeight = par2;
			return this;
		}

		/**
	 * Disable the rain for the biome.
	 */

		private BiomeGenBase setDisableRain()
		{
			this.enableRain = false;
			return this;
		}

		/**
	 * Gets a WorldGen appropriate for this biome.
	 */

	//	public WorldGenerator getRandomWorldGenForTrees(Random par1Random)
	//	{
	//		return (WorldGenerator) (par1Random.nextInt(10) == 0 ? this.worldGeneratorBigTree : this.worldGeneratorTrees);
//		}

		/**
	 * Gets a WorldGen appropriate for this biome.
	 */

		//public WorldGenerator getRandomWorldGenForGrass(Random par1Random)
	//	{
	//		return new WorldGenTallGrass(Block.tallGrass.blockID, 1);
	//	}

		/**
	 * sets enableSnow to true during biome initialization. returns BiomeGenBase.
	 */

		protected BiomeGenBase setEnableSnow()
		{
			this.enableSnow = true;
			return this;
		}

		protected BiomeGenBase setBiomeName(String par1Str)
		{
			this.biomeName = par1Str;
			// MCPatcher Start
			//ColorizeWorld.setupBiome(this);
			// MCPatcher End
			return this;
		}

		protected BiomeGenBase func_76733_a(int par1)
		{
			this.field_76754_C = par1;
			return this;
		}

		protected BiomeGenBase setColor(int par1)
		{
			this.color = par1;
			return this;
		}

		/**
	 * takes temperature, returns color
	 */

		public int getSkyColorByTemp(float par1)
		{
			par1 /= 3.0F;

			if (par1 < -1.0F)
			{
				par1 = -1.0F;
			}

			if (par1 > 1.0F)
			{
				par1 = 1.0F;
			}

			return Color.FromArgb((int) (0.62222224F - par1*0.05F), (int) (0.5F + par1*0.1F), (int) 1.0F).ToArgb();
		}

		/**
	 * Returns the correspondent list of the EnumCreatureType informed.
	 */
//	public List getSpawnableList(EnumCreatureType par1EnumCreatureType) {
//		return par1EnumCreatureType == EnumCreatureType.monster ? this.spawnableMonsterList : (par1EnumCreatureType == EnumCreatureType.creature ? this.spawnableCreatureList : (par1EnumCreatureType == EnumCreatureType.waterCreature ? this.spawnableWaterCreatureList : (par1EnumCreatureType == EnumCreatureType.ambient ? this.spawnableCaveCreatureList : null)));
//	}

		/**
	 * Returns true if the biome have snowfall instead a normal rain.
	 */

		public bool getEnableSnow()
		{
			return this.enableSnow;
		}

		/**
	 * Return true if the biome supports lightning bolt spawn, either by have the bolts enabled and have rain enabled.
	 */

		public bool canSpawnLightningBolt()
		{
			return this.enableSnow ? false : this.enableRain;
		}

		/**
	 * Checks to see if the rainfall level of the biome is extremely high
	 */

		public bool isHighHumidity()
		{
			return this.rainfall > 0.85F;
		}

		/**
	 * returns the chance a creature has to spawn.
	 */

		public float getSpawningChance()
		{
			return 0.1F;
		}

		/**
	 * Gets an integer representation of this biome's rainfall
	 */

		public int getIntRainfall()
		{
			return (int) (this.rainfall*65536.0F);
		}

		/**
	 * Gets an integer representation of this biome's temperature
	 */

		public int getIntTemperature()
		{
			return (int) (this.temperature*65536.0F);
		}

		/**
	 * Gets a floating point representation of this biome's rainfall
	 */

		public float getFloatRainfall()
		{
			return this.rainfall;
		}

		/**
	 * Gets a floating point representation of this biome's temperature
	 */

		public float getFloatTemperature()
		{
			return this.temperature;
		}

		public void decorate(Level par1World, Random par2Random, int par3, int par4)
		{
			this.theBiomeDecorator.decorate(par1World, par2Random, par3, par4);
		}

		/**
	 * Provides the basic grass color based on the biome temperature and rainfall
	 */

		public int getBiomeGrassColor()
		{
			//	double var1 = (double) MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
//double var3 = (double) MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
			//return ColorizerGrass.getGrassColor(var1, var3);
			return 0;
		}

		/**
	 * Provides the basic foliage color based on the biome temperature and rainfall
	 */

		public int getBiomeFoliageColor()
		{
			//		double var1 = (double) MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
			//	double var3 = (double) MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
			//	return ColorizerFoliage.getFoliageColor(var1, var3);
			return 0;
		}

	}
}